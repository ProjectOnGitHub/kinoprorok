!function(){var t={662:function(t,e,n){var o,r,i;function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}i=function(){"use strict";var t=function(t){var e=t.id,n=t.viewBox,o=t.content;this.id=e,this.viewBox=n,this.content=o};function e(t,e){return t(e={exports:{}},e.exports),e.exports}t.prototype.stringify=function(){return this.content},t.prototype.toString=function(){return this.stringify()},t.prototype.destroy=function(){var t=this;["id","viewBox","content"].forEach((function(e){return delete t[e]}))},"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self&&self;var o=e((function(t,e){t.exports=function(){function t(t){return t&&"object"===u(t)&&"[object RegExp]"!==Object.prototype.toString.call(t)&&"[object Date]"!==Object.prototype.toString.call(t)}function e(e,n){return n&&!0===n.clone&&t(e)?o((r=e,Array.isArray(r)?[]:{}),e,n):e;var r}function n(n,r,i){var u=n.slice();return r.forEach((function(r,c){void 0===u[c]?u[c]=e(r,i):t(r)?u[c]=o(n[c],r,i):-1===n.indexOf(r)&&u.push(e(r,i))})),u}function o(r,i,u){var c=Array.isArray(i),s=(u||{arrayMerge:n}).arrayMerge||n;return c?Array.isArray(r)?s(r,i,u):e(i,u):function(n,r,i){var u={};return t(n)&&Object.keys(n).forEach((function(t){u[t]=e(n[t],i)})),Object.keys(r).forEach((function(c){t(r[c])&&n[c]?u[c]=o(n[c],r[c],i):u[c]=e(r[c],i)})),u}(r,i,u)}return o.all=function(t,e){if(!Array.isArray(t)||t.length<2)throw new Error("first argument should be an array with at least two elements");return t.reduce((function(t,n){return o(t,n,e)}))},o}()})),r=e((function(t,e){e.default={svg:{name:"xmlns",uri:"http://www.w3.org/2000/svg"},xlink:{name:"xmlns:xlink",uri:"http://www.w3.org/1999/xlink"}},t.exports=e.default})),i=r.svg,c=r.xlink,s={};s[i.name]=i.uri,s[c.name]=c.uri;var a=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={isMounted:{}};return n.isMounted.get=function(){return!!this.node},e.createFromExistingNode=function(t){return new e({id:t.getAttribute("id"),viewBox:t.getAttribute("viewBox"),content:t.outerHTML})},e.prototype.destroy=function(){this.isMounted&&this.unmount(),t.prototype.destroy.call(this)},e.prototype.mount=function(t){if(this.isMounted)return this.node;var e="string"==typeof t?document.querySelector(t):t,n=this.render();return this.node=n,e.appendChild(n),n},e.prototype.render=function(){return function(t){var e=!!document.importNode,n=(new DOMParser).parseFromString(t,"image/svg+xml").documentElement;return e?document.importNode(n,!0):n}(function(t,e){var n;return void 0===t&&(t=""),"<svg "+(n=o(s,e||{}),Object.keys(n).map((function(t){return t+'="'+n[t].toString().replace(/"/g,"&quot;")+'"'})).join(" ")+">")+t+"</svg>"}(this.stringify())).childNodes[0]},e.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},Object.defineProperties(e.prototype,n),e}(t);return a},"object"===u(e)?t.exports=i():void 0===(r="function"==typeof(o=i)?o.call(e,n,e,t):o)||(t.exports=r)},58:function(t,e,n){var o,r,i;function u(t){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},u(t)}i=function(){"use strict";function t(t,e){return t(e={exports:{}},e.exports),e.exports}"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self&&self;var e=t((function(t,e){t.exports=function(){function t(t){return t&&"object"===u(t)&&"[object RegExp]"!==Object.prototype.toString.call(t)&&"[object Date]"!==Object.prototype.toString.call(t)}function e(e,n){return n&&!0===n.clone&&t(e)?o((r=e,Array.isArray(r)?[]:{}),e,n):e;var r}function n(n,r,i){var u=n.slice();return r.forEach((function(r,c){void 0===u[c]?u[c]=e(r,i):t(r)?u[c]=o(n[c],r,i):-1===n.indexOf(r)&&u.push(e(r,i))})),u}function o(r,i,u){var c=Array.isArray(i),s=(u||{arrayMerge:n}).arrayMerge||n;return c?Array.isArray(r)?s(r,i,u):e(i,u):function(n,r,i){var u={};return t(n)&&Object.keys(n).forEach((function(t){u[t]=e(n[t],i)})),Object.keys(r).forEach((function(c){t(r[c])&&n[c]?u[c]=o(n[c],r[c],i):u[c]=e(r[c],i)})),u}(r,i,u)}return o.all=function(t,e){if(!Array.isArray(t)||t.length<2)throw new Error("first argument should be an array with at least two elements");return t.reduce((function(t,n){return o(t,n,e)}))},o}()})),o=t((function(t,e){e.default={svg:{name:"xmlns",uri:"http://www.w3.org/2000/svg"},xlink:{name:"xmlns:xlink",uri:"http://www.w3.org/1999/xlink"}},t.exports=e.default})),r=o.svg,i=o.xlink,c={};c[r.name]=r.uri,c[i.name]=i.uri;var s,a=function(t,n){var o;return void 0===t&&(t=""),"<svg "+(o=e(c,n||{}),Object.keys(o).map((function(t){return t+'="'+o[t].toString().replace(/"/g,"&quot;")+'"'})).join(" "))+">"+t+"</svg>"},d=o.svg,l=o.xlink,f={attrs:(s={style:["position: absolute","width: 0","height: 0"].join("; "),"aria-hidden":"true"},s[d.name]=d.uri,s[l.name]=l.uri,s)},p=function(t){this.config=e(f,t||{}),this.symbols=[]};p.prototype.add=function(t){var e=this.symbols,n=this.find(t.id);return n?(e[e.indexOf(n)]=t,!1):(e.push(t),!0)},p.prototype.remove=function(t){var e=this.symbols,n=this.find(t);return!!n&&(e.splice(e.indexOf(n),1),n.destroy(),!0)},p.prototype.find=function(t){return this.symbols.filter((function(e){return e.id===t}))[0]||null},p.prototype.has=function(t){return null!==this.find(t)},p.prototype.stringify=function(){var t=this.config.attrs,e=this.symbols.map((function(t){return t.stringify()})).join("");return a(e,t)},p.prototype.toString=function(){return this.stringify()},p.prototype.destroy=function(){this.symbols.forEach((function(t){return t.destroy()}))};var y=function(t){var e=t.id,n=t.viewBox,o=t.content;this.id=e,this.viewBox=n,this.content=o};y.prototype.stringify=function(){return this.content},y.prototype.toString=function(){return this.stringify()},y.prototype.destroy=function(){var t=this;["id","viewBox","content"].forEach((function(e){return delete t[e]}))};var h=function(t){var e=!!document.importNode,n=(new DOMParser).parseFromString(t,"image/svg+xml").documentElement;return e?document.importNode(n,!0):n},m=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={isMounted:{}};return n.isMounted.get=function(){return!!this.node},e.createFromExistingNode=function(t){return new e({id:t.getAttribute("id"),viewBox:t.getAttribute("viewBox"),content:t.outerHTML})},e.prototype.destroy=function(){this.isMounted&&this.unmount(),t.prototype.destroy.call(this)},e.prototype.mount=function(t){if(this.isMounted)return this.node;var e="string"==typeof t?document.querySelector(t):t,n=this.render();return this.node=n,e.appendChild(n),n},e.prototype.render=function(){var t=this.stringify();return h(a(t)).childNodes[0]},e.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},Object.defineProperties(e.prototype,n),e}(y),v={autoConfigure:!0,mountTo:"body",syncUrlsWithBaseTag:!1,listenLocationChangeEvent:!0,locationChangeEvent:"locationChange",locationChangeAngularEmitter:!1,usagesToUpdate:"use[*|href]",moveGradientsOutsideSymbol:!1},g=function(t){return Array.prototype.slice.call(t,0)},b=function(t){return(t||window.location.href).split("#")[0]},_=function(t,e){return void 0===e&&(e="linearGradient, radialGradient, pattern, mask, clipPath"),g(t.querySelectorAll("symbol")).forEach((function(t){g(t.querySelectorAll(e)).forEach((function(e){t.parentNode.insertBefore(e,t)}))})),t},w=o.xlink.uri,x="xlink:href",E=/[{}|\\\^\[\]`"<>]/g;function S(t){return t.replace(E,(function(t){return"%"+t[0].charCodeAt(0).toString(16).toUpperCase()}))}var L,O=["clipPath","colorProfile","src","cursor","fill","filter","marker","markerStart","markerMid","markerEnd","mask","stroke","style"],k=O.map((function(t){return"["+t+"]"})).join(","),A="mount",j="symbol_mount",C=function(t){function n(n){var o=this;void 0===n&&(n={}),t.call(this,e(v,n));var r,i=(r=r||Object.create(null),{on:function(t,e){(r[t]||(r[t]=[])).push(e)},off:function(t,e){r[t]&&r[t].splice(r[t].indexOf(e)>>>0,1)},emit:function(t,e){(r[t]||[]).map((function(t){t(e)})),(r["*"]||[]).map((function(n){n(t,e)}))}});this._emitter=i,this.node=null;var u=this.config;if(u.autoConfigure&&this._autoConfigure(n),u.syncUrlsWithBaseTag){var c=document.getElementsByTagName("base")[0].getAttribute("href");i.on(A,(function(){return o.updateUrls("#",c)}))}var s,a=this._handleLocationChange.bind(this);this._handleLocationChange=a,u.listenLocationChangeEvent&&window.addEventListener(u.locationChangeEvent,a),u.locationChangeAngularEmitter&&(s=u.locationChangeEvent,angular.module("ng").run(["$rootScope",function(t){t.$on("$locationChangeSuccess",(function(t,e,n){var o,r,i;o=s,r={oldUrl:n,newUrl:e},(i=document.createEvent("CustomEvent")).initCustomEvent(o,!1,!1,r),window.dispatchEvent(i)}))}])),i.on(A,(function(t){u.moveGradientsOutsideSymbol&&_(t)})),i.on(j,(function(t){var e;u.moveGradientsOutsideSymbol&&_(t.parentNode),(/msie/i.test(navigator.userAgent)||/trident/i.test(navigator.userAgent)||/edge/i.test(navigator.userAgent))&&(e=[],g(t.querySelectorAll("style")).forEach((function(t){t.textContent+="",e.push(t)})))}))}t&&(n.__proto__=t),n.prototype=Object.create(t&&t.prototype),n.prototype.constructor=n;var o={isMounted:{}};return o.isMounted.get=function(){return!!this.node},n.prototype._autoConfigure=function(t){var e=this.config;void 0===t.syncUrlsWithBaseTag&&(e.syncUrlsWithBaseTag=void 0!==document.getElementsByTagName("base")[0]),void 0===t.locationChangeAngularEmitter&&(e.locationChangeAngularEmitter=void 0!==window.angular),void 0===t.moveGradientsOutsideSymbol&&(e.moveGradientsOutsideSymbol=/firefox/i.test(navigator.userAgent))},n.prototype._handleLocationChange=function(t){var e=t.detail,n=e.oldUrl,o=e.newUrl;this.updateUrls(n,o)},n.prototype.add=function(e){var n=t.prototype.add.call(this,e);return this.isMounted&&n&&(e.mount(this.node),this._emitter.emit(j,e.node)),n},n.prototype.attach=function(t){var e=this,n=this;if(n.isMounted)return n.node;var o="string"==typeof t?document.querySelector(t):t;return n.node=o,this.symbols.forEach((function(t){t.mount(n.node),e._emitter.emit(j,t.node)})),g(o.querySelectorAll("symbol")).forEach((function(t){var e=m.createFromExistingNode(t);e.node=t,n.add(e)})),this._emitter.emit(A,o),o},n.prototype.destroy=function(){var t=this,e=t.config,n=t.symbols,o=t._emitter;n.forEach((function(t){return t.destroy()})),o.off("*"),window.removeEventListener(e.locationChangeEvent,this._handleLocationChange),this.isMounted&&this.unmount()},n.prototype.mount=function(t,e){void 0===t&&(t=this.config.mountTo),void 0===e&&(e=!1);var n=this;if(n.isMounted)return n.node;var o="string"==typeof t?document.querySelector(t):t,r=n.render();return this.node=r,e&&o.childNodes[0]?o.insertBefore(r,o.childNodes[0]):o.appendChild(r),this._emitter.emit(A,r),r},n.prototype.render=function(){return h(this.stringify())},n.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},n.prototype.updateUrls=function(t,e){if(!this.isMounted)return!1;var n=document.querySelectorAll(this.config.usagesToUpdate);return function(t,e,n,o){var r,i,u=S(n),c=S(o);(r=t.querySelectorAll(k),i=function(t){var e=t.localName,n=t.value;return-1!==O.indexOf(e)&&-1!==n.indexOf("url("+u)},g(r).reduce((function(t,e){if(!e.attributes)return t;var n=g(e.attributes),o=i?n.filter(i):n;return t.concat(o)}),[])).forEach((function(t){return t.value=t.value.replace(new RegExp(u.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"g"),c)})),function(t,e,n){g(t).forEach((function(t){var o=t.getAttribute(x);if(o&&0===o.indexOf(e)){var r=o.replace(e,n);t.setAttributeNS(w,x,r)}}))}(e,u,c)}(this.node,n,b(t)+"#",b(e)+"#"),!0},Object.defineProperties(n.prototype,o),n}(p),M=t((function(t){var e,n,o,r,i,u;t.exports=(n=[],r=(o=document).documentElement.doScroll,i="DOMContentLoaded",(u=(r?/^loaded|^c/:/^loaded|^i|^c/).test(o.readyState))||o.addEventListener(i,e=function(){for(o.removeEventListener(i,e),u=1;e=n.shift();)e()}),function(t){u?setTimeout(t,0):n.push(t)})})),N="__SVG_SPRITE_NODE__",q="__SVG_SPRITE__";window[q]?L=window[q]:(L=new C({attrs:{id:N,"aria-hidden":"true"}}),window[q]=L);var B=function(){var t=document.getElementById(N);t?L.attach(t):L.mount(document.body,!0)};return document.body?B():M(B),L},"object"===u(e)?t.exports=i():void 0===(r="function"==typeof(o=i)?o.call(e,n,e,t):o)||(t.exports=r)},833:function(t,e,n){"use strict";n.r(e);var o=n(662),r=n.n(o),i=n(58),u=n.n(i),c=new(r())({id:"search-icon",use:"search-icon-usage",viewBox:"0 0 23 23",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 23 23" id="search-icon"><g clip-path="url(#search-icon_a)"><path d="M22.041 23a.956.956 0 0 1-.677-.28l-6.69-6.69a.957.957 0 1 1 1.356-1.355l6.689 6.69A.957.957 0 0 1 22.04 23Z" /><path d="M9.344 18.688C4.192 18.688 0 14.495 0 9.344 0 4.192 4.192 0 9.344 0c5.152 0 9.344 4.192 9.344 9.344 0 5.152-4.192 9.344-9.344 9.344Zm0-16.771c-4.095 0-7.427 3.332-7.427 7.427s3.332 7.427 7.427 7.427 7.427-3.332 7.427-7.427-3.332-7.427-7.427-7.427Z" /></g><defs><clipPath id="search-icon_a"><path d="M0 0h23v23H0z" /></clipPath></defs></symbol>'});u().add(c),e.default=c},100:function(t,e,n){var o={"./search-icon.svg":833};function r(t){var e=i(t);return n(e)}function i(t){if(!n.o(o,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return o[t]}r.keys=function(){return Object.keys(o)},r.resolve=i,t.exports=r,r.id=100}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={exports:{}};return t[o].call(i.exports,i,i.exports,n),i.exports}n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,{a:e}),e},n.d=function(t,e){for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},function(){"use strict";var t;(t=n(100)).keys().forEach(t);var e=document.querySelector(".header__menu"),o=document.querySelector(".header__menu-button"),r=document.querySelector(".overlay"),i=o.querySelector(".cross"),u=document.querySelector(".category_contents"),c=document.querySelector(".category__button"),s=document.querySelector(".popup"),a=document.querySelector(".article"),d=document.querySelector(".popup__image"),l=document.querySelector(".popup__figure-text");a.addEventListener("click",(function(t){t.target.classList.contains("article__image")&&(s.classList.add("popup_active"),document.body.classList.add("scroll-lock"),d.src=t.target.src,l.textContent=t.target.nextElementSibling.textContent)})),s.addEventListener("click",(function(t){(t.target.classList.contains("popup__image")||t.target.classList.contains("popup__overlay")||t.target.classList.contains("popup__figure-text"))&&(s.classList.remove("popup_active"),document.body.classList.remove("scroll-lock"))}));var f=function(t){(t.target.classList.contains("header__menu-link")||t.target.classList.contains("overlay"))&&(o.classList.remove("header__menu-button_opened"),e.classList.remove("header__menu_opened"),r.classList.remove("overlay_active"),i.classList.remove("cross_active"),document.body.classList.remove("scroll-lock"))};o.addEventListener("click",(function(){e.classList.toggle("header__menu_opened"),document.body.classList.toggle("scroll-lock"),r.classList.toggle("overlay_active"),i.classList.toggle("cross_active")})),e.addEventListener("click",f),r.addEventListener("click",f),c.addEventListener("click",(function(){u.classList.toggle("category_opened"),c.classList.toggle("category__button_active")})),u.addEventListener("click",(function(t){t.target.classList.contains("contents__link")&&(u.classList.remove("category_opened"),c.classList.remove("category__button_active"))}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,